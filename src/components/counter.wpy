<style lang="less">
.counter {
    text-align: left;
    font-size: 12px;
}

.count {
    font-size: 18px;
    font-weight: bold;
    &.red {
        color: red;
    }
    &.green {
        color: green;
    }
}
</style>

<template>
<view class="counter {{style}}">
    <button @tap="plus" size="mini"> + </button>
    <button @tap="minus" size="mini"> - </button>
    <button @tap="incRement" size="mini" data-id="1"> INCREMENT </button>
    <button @tap="handleDecNum" size="mini"> DECREMENT </button>
    <button @tap="handleAsyncInc" size="mini"> ASYNC INCREMENT </button>
    <text class="count"> {{num}} </text>
    <text class="count"> {{stateNum}} </text>
    <text class="count"> {{asyncNum}} </text>
</view>
</template>

<script>
import wepy from 'wepy'
import { connect, getStore } from 'wepy-redux'
import { INCREMENT, DECREMENT } from '../store/types/counter'
import { incRement, decRement, asyncIncRement } from '../store/actions'

const store = getStore()
@connect({
    stateNum (state) {
        return state.counter.num
    },
    asyncNum (state) {
        return state.counter.asyncNum
    }
}, {
    incRement, decRement, asyncIncRement
})
export default class Counter extends wepy.component {
    props = {
        num: {
            type: [Number, String],
            coerce (v) {
                return +v
            },
            default: 50
        }
    }
    data = {}
    events = {
        'index-broadcast': (...args) => {
            const $event = args[args.length - 1]
            console.log(
                `${this.$name} receive ${$event.name} from ${$event.source.$name}`
            )
        }
    }
    watch = {
        num (curVal, oldVal) {
            console.log(`旧值：${oldVal}，新值：${curVal}`)
        }
    }
    methods = {
        handleIncNum () {
            this.methods.incRement(1)
            // store.dispatch({
            //     type: 'ASYNC_INCREMENT',
            //     payload: 1
            // })
        },
        handleDecNum () {
            this.methods.decRement(1)
            // store.dispatch({
            //     type: 'ASYNC_INCREMENT',
            //     payload: 1
            // })
        },
        handleAsyncInc () {
            this.methods.asyncIncRement(1)
            // store.dispatch({
            //     type: 'ASYNC_INCREMENT',
            //     payload: 1
            // })
        },
        plus () {
            this.num = this.num + 1
            console.log(this.$name + ' plus tap')
            this.$emit('index-emit', 1, 2, 3)
        },
        minus () {
            this.num = this.num - 1
            console.log(this.$name + ' minus tap')
        }
    }
}
</script>
